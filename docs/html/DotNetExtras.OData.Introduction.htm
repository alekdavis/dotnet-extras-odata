<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Introduction</title><meta name="Title" content="Introduction" /><meta name="Help.Id" content="DotNetExtras.OData.Introduction" /><meta name="Help.ContentType" content="Concepts" /><meta name="guid" content="DotNetExtras.OData.Introduction" /><meta name="Description" content="The DotNetExtras.OData library can parse and validate ODatahttps://learn.microsoft.com/en-us/dynamics365/business-central/dev-itpro/webservices/use-filter-expressions-in-odata-uris filter expressions." /><meta name="tocFile" content="../toc/Root.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">DotNetExtras.OData Library Documentation</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><div id="HeaderPrelimContainer" class="level my-1 px-2"><div id="PreliminaryContainer" class="level-left"><div class="level-item"><span class="tag is-warning is-medium">This is preliminary documentation and is subject to change.</span></div></div></div><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Introduction</h1><div><p>
        The <em>DotNetExtras.OData</em> library can parse and validate <a href="https://learn.microsoft.com/en-us/dynamics365/business-central/dev-itpro/webservices/use-filter-expressions-in-odata-uris" target="_blank" rel="noopener noreferrer">OData</a> filter expressions. For the detailed description of the library API, code samples, and usage scenarios, see the <em>API documentation</em> section.
      </p></div><h2 id="Overview" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Overview</h2><div id="IDBABSection"><p>
          The <em>DotNetExtras.OData</em> library can be useful if your application needs to parse and/or validate <a href="https://learn.microsoft.com/en-us/dynamics365/business-central/dev-itpro/webservices/use-filter-expressions-in-odata-uris" target="_blank" rel="noopener noreferrer">OData</a> filter expressions. While the parsing functionality is mostly for demonstration purposes, the validation functionality can be used to ensure that the filter expressions are valid before they are sent to a custom OData service.
        </p><h4 id="Implementation" class="quickLinkHeader">Implementation</h4><p>
                OData filter expressions apply data types. For example, if an application implements a REST API that supports OData filters to allow callers to search for users based on some criteria, then the filter should apply to the data type implementing the user or a subset of user properties that should be allowed in the filter query.
              </p><p>
                To validate the OData filter query before processing it or passing it to another service, the application can use the <span class="code">ODataFilterValidator</span> class which will check the filter query against the basic OData filter query syntax. <span class="code">ODataFilterValidator</span> will also make sure that only properties defined for the filter-specific type are used in the expression. The validator also supports custom rules that can further restrict the filter query to only allow certain properties or values.
              </p><p>
                The validation rules can be used to enforce:
              </p><ul><li><p>Allowed operators and the minimum and maximum number each operator can be used.</p></li><li><p>Allowed properties and the minimum and maximum number of times each property can be used.</p></li><li><p>Allowed operators that can be used with each property and the minimum and maximum number of times each operator can be used with each property.</p></li></ul><p>
                To validate a filter expression, pass the value to the <span class="code">ODataFilterValidator</span> constructor class and check the <span class="code">Passed</span> or <span class="code">Failed</span> property. If validation fails, the <span class="code">Errors</span> property will contain a list of errors describing the issues with the filter expression.
              </p><h4 id="Rules" class="quickLinkHeader">Rules</h4><p>
                The validation rules can be specified via:
              </p><ol><li><p>A <span class="code">ODataFilterRules</span> object.</p></li><li><p>A JSON string representing a serialized instance of a <span class="code">ODataFilterRules</span> object.</p></li><li><p>A shortcut notation representing the rules.</p></li></ol><p>
                Let's dissect the shortcut notation because it may not be obvious and it seems like the best option for use in the applications.
              </p><h4 id="Syntax" class="quickLinkHeader">Syntax</h4><p>
                The shortcut notation allows you to specify the rules in a concise way. The syntax is as follows:
              </p><ul><li><p>Multiple rules are separated by the pipe (<span class="code">|</span>) characters.</p></li><li><p>Each rule defines the explicit restrictions applied to one of the following categories:</p></li><li><ul><li><p>Operators</p></li><li><p>Properties</p></li><li><p>Operators applied to a property</p></li></ul></li><li><p>If no rule is defined for a particular category, all possible entries of this category will be allowed. If at least one rule is defined for a particular category, then only explicitly defined members of the category will be allowed. For example, if a rule only mentions two properties, then only these two properties will be allowed in the expression; however, all operators will be allowed.</p></li><li><p>The minimum and maximum number of occurrences in the filter expression can be defined after a colon (<span class="code">:</span>) and separated by a comma (<span class="code">,</span>), e.g. <span class="code">eq:1,2</span> (require the <span class="code">eq</span> operator to be used in the expression at least once and at most two times). Each number is optional and can be omitted, e.g. <span class="code">eq:1,</span> (require the <span class="code">eq</span> operator to be used in the expression at least once) or <span class="code">eq:,1</span> (allow the <span class="code">eq</span> operator to be used in the expression at most once; since there is no minimum number, it is not required).</p></li><li><p>To add a restriction for an operator that should be allowed to be used with a property, put the name of the operator inside of the square brackets (<span class="code">[]</span>) after the property name (the minimum and maximum occurrence numbers will apply to the number of times the operator is used with the property, e.g. <span class="code">type[eq]:1,1</span> (require the filter to include the <span class="code">type eq</span> expression exactly once).</p></li><li><p>It should never be the case, but if the name of a property conflicts with the name of an OData operator, a prefix hint (<span class="code">o:</span> for an operator or <span class="code">p:</span> for a property) must be used in the rule, e.g. <span class="code">p:type:1,1|o:eq:1,1</span>.</p></li></ul><p /><h4 id="Example" class="quickLinkHeader">Example</h4><p>
               The following examples show how to validate OData filter expressions.
              </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">Validate filter expression without rules and print errors</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">using DotNetExtras.OData;
...

// Just validate the basic syntax of the filter expression.
ODataFilterValidator&lt;User&gt; validator = new("user/loginId eq 'test'");

if (validator.Failed)
{
    Console.WriteLine(string.Join(" ", validator.Errors));
}</code></pre></div></div><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">Validate filter expression with rules and print errors</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">using DotNetExtras.OData;
...

// Validate the syntax of the filter expression and enforce the 'startsWith(loginId, ...)' query.
ODataFilterValidator&lt;User&gt; validator = new("startsWith(loginId, 'test')", "loginId[startsWith]:1,1");

if (validator.Failed)
{
    Console.WriteLine(string.Join(" ", validator.Errors));
}</code></pre></div></div><p>
                The following examples illustrate the formats of the filter validation rules:
              </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">Explicit restrictions for operators (no min/max)</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">eq|startsWith|and</code></pre></div></div><p>
                Allowed operators: <span class="code">eq</span>, <span class="code">startsWith</span>, <span class="code">and</span>. Any property can be used.
              </p><p>---</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">Explicit restrictions for properties (no min/max)</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">email|address/country|phone/countryPrefix</code></pre></div></div><p>
                Allowed properties: <span class="code">email</span>, <span class="code">address.country</span>, <span class="code">phone.countryPrefix</span>.
              </p><p>---</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">Explicit restrictions for operators and properties (with min/max)</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">eq:,1|startsWith:,1|and:,1|loginId:1,1|givenName:,1</code></pre></div></div><p>
                Allowed operators: <span class="code">eq</span>, <span class="code">startsWith</span>, <span class="code">and</span> (each can be used at most once). Required property: <span class="code">loginId</span> (must be used once). Optional property: <span class="code">givenName</span> (can be used at most once).
              </p><p>---</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">Explicit restrictions for operators allowed to be used with properties (with and without min/max)</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">type[eq]:1,1|type[and]:1,1|name[eq]:,1|name[startsWith]:,1|name[and]:,1|loginId[eq,and]:,2|givenName[eq,startsWith]:,2</code></pre></div></div><p>
                Required expression:<span class="code">type eq ... and</span>. Allowed expressions: <span class="code">name eq ...</span>, <span class="code">startsWith(name, ...)</span>, <span class="code">loginId eq ...</span>, <span class="code">givenName eq ...</span> (each can be used at most once). Optional expressions can be combined using the logical operator <span class="code">and</span>. Notice that when combining multiple operators for one property, the maximum number must be adjusted to accommodate both counts.
              </p><p>---</p><p>             
                For the complete example and other samples covering additional scenarios, see the source code (and read the comments) of the 
                <a href="https://github.com/alekdavis/dotnet-extras-odata/tree/main/ODataFilterParserDemo" target="_blank" rel="noopener noreferrer">filter parser</a> and 
                <a href="https://github.com/alekdavis/dotnet-extras-odata/tree/main/ODataFilterValidatorDemo" target="_blank" rel="noopener noreferrer">filter validator</a> projects. More examples can be also found in the <a href="https://github.com/alekdavis/dotnet-extras-odata/tree/main/ODataTests" target="_blank" rel="noopener noreferrer">unit tests</a></p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Other Resources</h4><div><a href="https://www.nuget.org/packages/DotNetExtras.OData" target="_blank" rel="noopener noreferrer">DotNetExtras.OData NuGet package</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Overview</a><ul class="menu"><li><a class="quickLink">Implementation</a></li><li><a class="quickLink">Rules</a></li><li><a class="quickLink">Syntax</a></li><li><a class="quickLink">Example</a></li></ul></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div id="FooterContent" class="column"><a href="https://github.com/alekdavis/dotnet-extras-odata" target="_blank">Project repository</a><p>Copyright © 2025 Alek Davis</p> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>